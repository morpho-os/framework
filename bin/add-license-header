#!/usr/bin/env php
<?php declare(strict_types=1);
namespace Morpho\Infra;

use function Morpho\Base\endsWith;
use function Morpho\Cli\shell;

require __DIR__ . '/../vendor/autoload.php';

$process = true;
if (posix_isatty(STDOUT)) {
    $res = shell('dialog --stdout --yesno \'Process?\' 0 0', ['checkCode' => false, 'capture' => true]);
    $process = !$res->isError();
}

function processNonPhpFile(string $filePath): void {
    var_dump($filePath);
}

function processPhpFile(string $filePath): void {
    $code = file_get_contents($filePath);
    $declareStmtManager = new DeclareStmtManager();
    $code = $declareStmtManager->removeCommentedOutDeclareStmt($code);
    $code = $declareStmtManager->removeDeclareStmt($code);
    $code = $declareStmtManager->addDeclareStmt($code, DeclareStmtManager::AT_FIRST_LINE);
    file_put_contents($filePath, $code);
}

function processPhtmlFile(string $filePath): void {
    var_dump($filePath);
}
/*
class AddLicenseCommand {
    public function __invoke($context) {
        $baseDirPath = realpath($context['baseDirPath']);
        if (!is_dir($baseDirPath . '/' . LIB_DIR_NAME) || !is_dir($baseDirPath . '/' . PUBLIC_DIR_NAME)) {
            throw new \UnexpectedValueException("Invalid base directory path");
        }
        $licenseText = <<<OUT
This file is part of morpho-os/framework
It is distributed under the 'Apache License Version 2.0' license.
See the https://github.com/morpho-os/framework/blob/master/LICENSE for the full license text.
OUT;

        $licenseHeaderManager = new LicenseHeaderManager();

        $i = $this->updateLicenseForFiles(
            $licenseHeaderManager,
            $context['filePaths'],
            $licenseText
        );

        showLn("Processed $i files");
    }

    private function updateLicenseForFiles(LicenseHeaderManager $licenseHeaderManager, iterable $filePaths, string $licenseText): int {
        $i = 0;
        foreach ($filePaths as $filePath) {
            $licenseHeaderManager->updateLicenseHeader($filePath, $licenseText);
            $i++;
        }
        return $i;
    }
}
*/

function process() {
    $baseDirPath = __DIR__ . '/..';
    foreach (new FilesIter($baseDirPath) as $filePath) {
        if (endsWith($filePath, '.js') || endsWith($filePath, '.ts') || endsWith($filePath, '.css') || endsWith($filePath, '.styl')) {
            processNonPhpFile($filePath);
        } elseif (endsWith($filePath, '.phtml')) {
            processPhtmlFile($filePath);
        } elseif (endsWith($filePath, '.php')) {
            processPhpFile($filePath);
        } else {
            throw new \UnexpectedValueException($filePath);
        }
    }
}

if ($process) {
    process();
}