<?php
namespace Morpho\Web\View;

use function Morpho\Base\htmlId;
use Morpho\Base\Node;
use Morpho\Base\ItemNotSetException;

abstract class HtmlNode extends Node {
    protected $tagName;

    /**
     * @var bool
     */
    protected $isSingleTag = false;

    protected $text;

    protected $escapeText = true;

    protected $attributes;

    public function __construct(array $options = []) {
        if (isset($options['text'])) {
            $this->text = $options['text'];
            unset($options['text']);
        }
        if (isset($options['name'])) {
            $this->setName($options['name']);
        }
        $this->mergeAttributes($options);
    }

    public function setText($text) {
        $this->text = $text;
    }

    public function getText() {
        return $this->text;
    }

    public function removeAttribute($name) {
        $this->initAttributes();
        unset($this->attributes[$name]);
    }

    public function setAttribute($name, $value) {
        $this->initAttributes();
        $this->attributes[$name] = $value;
    }

    public function getAttribute($name) {
        $this->initAttributes();
        if (!array_key_exists($name, $this->attributes)) {
            if ($name == 'id') {
                $this->attributes[$name] = $this->htmlId();
            } else {
                throw new ItemNotSetException($name);
            }
        }
        return $this->attributes[$name];
    }

    public function hasAttribute($name) {
        if ($name == 'id') {
            // The 'id' is autogenerated attribute.
            return true;
        }
        $this->initAttributes();
        return array_key_exists($name, $this->attributes);
    }

    public function mergeAttributes(array $attributes) {
        $this->initAttributes();
        $this->attributes = array_merge($this->attributes, $attributes);
    }

    public function setAttributes(array $attributes) {
        $this->attributes = $attributes;
    }

    public function getAttributes() {
        $this->initAttributes();
        return $this->attributes;
    }

    protected function initAttributes() {
        if (null !== $this->attributes) {
            return;
        }
        $this->attributes = [];
        $this->attributes += $this->getDefaultAttributes();
    }

    public function render() {
        return TagRenderer::render(
            $this->tagName,
            $this->getAttributes(),
            $this->getText(),
            ['isSingle' => $this->isSingleTag, 'escapeText' => $this->escapeText]
        );
    }

    protected function htmlId() {
        return htmlId($this->getName());
    }

    /**
     * @return array
     */
    abstract protected function getDefaultAttributes();
}
